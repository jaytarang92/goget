{
  "name": "Goget",
  "tagline": "Goget anything with verification!",
  "body": "# Goget\r\n\r\nGoget lets you download files from the internet with checksum verification for md5 and sha256.\r\n\r\nIf md5/sha256 don't match it will not save it to local drive. It does the verifcation before placing it in local storage.\r\n\r\nI will be adding more crpyto support. :)\r\n\r\n##Example\r\n```go\r\npackage main\r\n\r\n/*\r\n\tCURRENTLY USING THIS TO CREATE THE BINARY\r\n*/\r\n\r\nimport (\r\n\t\"flag\"\r\n\t\"fmt\"\r\n\t\"os\"\r\n\r\n\t\"github.com/jaytarang92/goget\"\r\n)\r\n\r\n// gogetter -url=http://www.7-zip.org/a/7z1602-src.7z -dst=7zip.7z -md5=8523200928a577cd1747d8575c4ecacf\r\n// gogetter -url=https://storage.googleapis.com/golang/go1.7.src.tar.gz -dst=go.src.tar.gz -sha256=72680c16ba0891fcf2ccf46d0f809e4ecf47bbf889f5d884ccb54c5e9a17e1c0\r\n\r\nfunc main() {\r\n\t// arguments accepted\r\n\tmd5Check := flag.String(\"md5\", \"\", \"If md5 is passed it will check it before saving file.\")\r\n\tsha256chk := flag.String(\"sha256\", \"\", \"Same as md5 but using sha256\")\r\n\turl := flag.String(\"url\", \"\", \"url to file\")\r\n\tdest := flag.String(\"dst\", \"\", \"the output filename\")\r\n\tflag.Parse()\r\n\t\r\n\t// make variables for future use\r\n\tvar hash string\r\n\tvar hashtype string\r\n\t\r\n\t// if md5 and sha256 are passed then exit\r\n\tif fmt.Sprintf(\"%s\", *md5Check) != \"\" && fmt.Sprintf(\"%s\", *sha256chk) != \"\" {\r\n\t\tfmt.Println(\"\\tPlease choose 1. Either sha256 or md5.\\n\")\r\n\t\tos.Exit(1)\r\n\t}\r\n\t\r\n\t//Sprintf formats %x to a %s\r\n\tif fmt.Sprintf(\"%s\", *md5Check) == \"\" && fmt.Sprintf(\"%s\", *sha256chk) == \"\" {\r\n\t\t//just downloads\r\n\t\tgogetter.SaveIt(gogetter.GoTo(*url), *dest)\r\n\t} else {\r\n\t\t//checks the hash passed and runs gogetter\r\n\t\tif fmt.Sprintf(\"%s\", *md5Check) != \"\" {\r\n\t\t\thash = fmt.Sprintf(\"%s\", *md5Check)\r\n\t\t\thashtype = \"md5\"\r\n\t\t\tif len(hash) != 32 {\r\n\t\t\t\tfmt.Println(\"\\tPlease pass a valid md5 value!\")\r\n\t\t\t\tos.Exit(1)\r\n\t\t\t}\r\n\t\t} else if fmt.Sprintf(\"%s\", *sha256chk) != \"\" {\r\n\t\t\thash = fmt.Sprintf(\"%s\", *sha256chk)\r\n\t\t\thashtype = \"sha256\"\r\n\t\t\tif len(hash) != 64 {\r\n\t\t\t\tfmt.Println(\"\\tPlease pass a valid sha256 value!\")\r\n\t\t\t\tos.Exit(1)\r\n\t\t\t}\r\n\t\t}\r\n\t\tinput := gogetter.GoTo(*url)\r\n\t\tgogetter.SaveIt(gogetter.HashCheck(input, hash, gogetter.Hash2str(input, hash, hashtype)), *dest)\r\n\t}\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}